{"ast":null,"code":"var _jsxFileName = \"/home/max/code-challenges/Bot-Battlr/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport BotCollection from './components/BotCollection';\nimport YourBotArmy from './components/YourBotArmy';\nimport SortBar from './components/SortBar';\nimport BotSpecs from './components/BotSpecs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [bots, setBots] = useState([]);\n  const [yourBotArmy, setYourBotArmy] = useState([]);\n  const [selectedBot, setSelectedBot] = useState(null);\n  const [sortBy, setSortBy] = useState('name');\n  useEffect(() => {\n    fetch(`http://localhost:3001/bots?_sort=${sortBy}`).then(response => response.json()).then(data => setBots(data)).catch(error => console.error('Error fetching bots:', error));\n  }, [sortBy]);\n  const addBotToArmy = bot => {\n    if (!yourBotArmy.some(b => b.id === bot.id)) {\n      setYourBotArmy(prevArmy => [...prevArmy, bot]);\n    }\n  };\n  const removeBotFromArmy = botId => {\n    setYourBotArmy(prevArmy => prevArmy.filter(bot => bot.id !== botId));\n  };\n  const dischargeBot = botId => {\n    setBots(prevBots => prevBots.filter(bot => bot.id !== botId));\n    setYourBotArmy(prevArmy => prevArmy.filter(bot => bot.id !== botId));\n  };\n  const selectBot = bot => {\n    setSelectedBot(bot);\n  };\n  const goBackToListView = () => {\n    setSelectedBot(null);\n  };\n  const handleSortChange = value => {\n    setSortBy(value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Bot Battlr\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SortBar, {\n      onSortChange: handleSortChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), selectedBot ? /*#__PURE__*/_jsxDEV(BotSpecs, {\n      bot: selectedBot,\n      goBackToListView: goBackToListView,\n      addBotToArmy: addBotToArmy\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(BotCollection, {\n        bots: bots,\n        selectBot: selectBot\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(YourBotArmy, {\n        army: yourBotArmy,\n        removeBotFromArmy: removeBotFromArmy,\n        dischargeBot: dischargeBot\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"U0eq6DeiNVaqmXeePJm5eRJ6ZjE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BotCollection","YourBotArmy","SortBar","BotSpecs","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","bots","setBots","yourBotArmy","setYourBotArmy","selectedBot","setSelectedBot","sortBy","setSortBy","fetch","then","response","json","data","catch","error","console","addBotToArmy","bot","some","b","id","prevArmy","removeBotFromArmy","botId","filter","dischargeBot","prevBots","selectBot","goBackToListView","handleSortChange","value","children","fileName","_jsxFileName","lineNumber","columnNumber","onSortChange","army","_c","$RefreshReg$"],"sources":["/home/max/code-challenges/Bot-Battlr/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport BotCollection from './components/BotCollection';\nimport YourBotArmy from './components/YourBotArmy';\nimport SortBar from './components/SortBar';\nimport BotSpecs from './components/BotSpecs';\n\nconst App = () => {\n  const [bots, setBots] = useState([]);\n  const [yourBotArmy, setYourBotArmy] = useState([]);\n  const [selectedBot, setSelectedBot] = useState(null);\n  const [sortBy, setSortBy] = useState('name'); \n  useEffect(() => {\n    fetch(`http://localhost:3001/bots?_sort=${sortBy}`)\n      .then((response) => response.json())\n      .then((data) => setBots(data))\n      .catch((error) => console.error('Error fetching bots:', error));\n  }, [sortBy]);\n\n  const addBotToArmy = (bot) => {\n    if (!yourBotArmy.some((b) => b.id === bot.id)) {\n      setYourBotArmy((prevArmy) => [...prevArmy, bot]);\n    }\n  };\n\n  const removeBotFromArmy = (botId) => {\n    setYourBotArmy((prevArmy) => prevArmy.filter((bot) => bot.id !== botId));\n  };\n\n  const dischargeBot = (botId) => {\n    setBots((prevBots) => prevBots.filter((bot) => bot.id !== botId));\n    setYourBotArmy((prevArmy) => prevArmy.filter((bot) => bot.id !== botId));\n  };\n\n  const selectBot = (bot) => {\n    setSelectedBot(bot);\n  };\n\n  const goBackToListView = () => {\n    setSelectedBot(null);\n  };\n\n  const handleSortChange = (value) => {\n    setSortBy(value);\n  };\n  return (\n    <div>\n      <h1>Bot Battlr</h1>\n      <SortBar onSortChange={handleSortChange} />\n      {selectedBot ? (\n        <BotSpecs\n          bot={selectedBot}\n          goBackToListView={goBackToListView}\n          addBotToArmy={addBotToArmy}\n        />\n      ) : (\n        <>\n          <BotCollection bots={bots} selectBot={selectBot} />\n          <YourBotArmy\n            army={yourBotArmy}\n            removeBotFromArmy={removeBotFromArmy}\n            dischargeBot={dischargeBot}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}