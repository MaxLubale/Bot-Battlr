{"ast":null,"code":"var _jsxFileName = \"/home/max/code-challenges/Bot-Battlr/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport BotCollection from './components/BotCollection';\nimport YourBotArmy from './components/YourBotArmy';\nimport SortBar from './components/SortBar';\nimport BotSpecs from './components/BotSpecs';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [bots, setBots] = useState([]);\n  const [yourBotArmy, setYourBotArmy] = useState([]);\n  const [selectedBot, setSelectedBot] = useState(null);\n  const [sortBy, setSortBy] = useState('name'); // Default sorting by name\n\n  useEffect(() => {\n    fetch(`http://localhost:3001/bots?_sort=${sortBy}`).then(response => response.json()).then(data => setBots(data)).catch(error => console.error('Error fetching bots:', error));\n  }, [sortBy]);\n  useEffect(() => {\n    fetch('http://localhost:3001/enlisted').then(response => response.json()).then(data => setYourBotArmy(data)).catch(error => console.error('Error fetching enlisted bots:', error));\n  }, []); // Fetch enlisted bots once on component mount\n\n  const addBotToArmy = bot => {\n    if (!yourBotArmy.some(bot => bot.id === bot.id)) {\n      setYourBotArmy(enlisted => [...enlisted, bot]);\n      fetch('http://localhost:3001/enlisted', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(bot)\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error(`Failed to enlist bot: ${response.statusText}`);\n        }\n      }).catch(error => console.error('Error enlisting bot:', error));\n    }\n  };\n  const removeBotFromArmy = botId => {\n    fetch(`http://localhost:3001/enlisted/${botId}`, {\n      method: 'DELETE'\n    }).then(response => {\n      if (response.ok) {\n        setYourBotArmy(enlisted => enlisted.filter(bot => bot.id !== botId));\n      } else {\n        throw new Error(`Failed to remove bot with ID ${botId} from army: ${response.statusText}`);\n      }\n    }).catch(error => console.error(error.message));\n  };\n  const dischargeBot = botId => {\n    fetch(`http://localhost:3001/bots/${botId}`, {\n      method: 'DELETE'\n    }).then(() => {\n      setBots(bots => bots.filter(bot => bot.id !== botId));\n      setYourBotArmy(bots => bots.filter(bot => bot.id !== botId));\n    }).catch(error => console.error('Error discharging bot:', error));\n  };\n  const selectBot = bot => {\n    setSelectedBot(bot);\n  };\n  const goBackToListView = () => {\n    setSelectedBot(null);\n  };\n  const handleSortChange = value => {\n    setSortBy(value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      id: \"title\",\n      children: \"Bot Battlr\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SortBar, {\n      onSortChange: handleSortChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), selectedBot ? /*#__PURE__*/_jsxDEV(BotSpecs, {\n      bot: selectedBot,\n      goBackToListView: goBackToListView,\n      addBotToArmy: addBotToArmy\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(YourBotArmy, {\n        army: yourBotArmy,\n        removeBotFromArmy: removeBotFromArmy\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(BotCollection, {\n        bots: bots,\n        selectBot: selectBot,\n        addBotToArmy: addBotToArmy,\n        dischargeBot: dischargeBot\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"nII7TbJUP6UXDmioO1kFZioQIT0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BotCollection","YourBotArmy","SortBar","BotSpecs","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","bots","setBots","yourBotArmy","setYourBotArmy","selectedBot","setSelectedBot","sortBy","setSortBy","fetch","then","response","json","data","catch","error","console","addBotToArmy","bot","some","id","enlisted","method","headers","body","JSON","stringify","ok","Error","statusText","removeBotFromArmy","botId","filter","message","dischargeBot","selectBot","goBackToListView","handleSortChange","value","children","fileName","_jsxFileName","lineNumber","columnNumber","onSortChange","army","_c","$RefreshReg$"],"sources":["/home/max/code-challenges/Bot-Battlr/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport BotCollection from './components/BotCollection';\nimport YourBotArmy from './components/YourBotArmy';\nimport SortBar from './components/SortBar';\nimport BotSpecs from './components/BotSpecs';\nimport './App.css';\n\nconst App = () => {\n  const [bots, setBots] = useState([]);\n  const [yourBotArmy, setYourBotArmy] = useState([]);\n  const [selectedBot, setSelectedBot] = useState(null);\n  const [sortBy, setSortBy] = useState('name'); // Default sorting by name\n\n  useEffect(() => {\n    fetch(`http://localhost:3001/bots?_sort=${sortBy}`)\n      .then((response) => response.json())\n      .then((data) => setBots(data))\n      .catch((error) => console.error('Error fetching bots:', error));\n  }, [sortBy]);\n\n  useEffect(() => {\n    fetch('http://localhost:3001/enlisted')\n      .then((response) => response.json())\n      .then((data) => setYourBotArmy(data))\n      .catch((error) => console.error('Error fetching enlisted bots:', error));\n  }, []); // Fetch enlisted bots once on component mount\n\n  const addBotToArmy = (bot) => {\n    if (!yourBotArmy.some((bot) => bot.id === bot.id)) {\n      setYourBotArmy((enlisted) => [...enlisted, bot]);\n\n      fetch('http://localhost:3001/enlisted', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(bot),\n      })\n        .then((response) => {\n          if (!response.ok) {\n            throw new Error(`Failed to enlist bot: ${response.statusText}`);\n          }\n        })\n        .catch((error) => console.error('Error enlisting bot:', error));\n    }\n  };\n\n  const removeBotFromArmy = (botId) => {\n    fetch(`http://localhost:3001/enlisted/${botId}`, {\n      method: 'DELETE',\n    })\n      .then((response) => {\n        if (response.ok) {\n          setYourBotArmy((enlisted) => enlisted.filter((bot) => bot.id !== botId));\n        } else {\n          throw new Error(`Failed to remove bot with ID ${botId} from army: ${response.statusText}`);\n        }\n      })\n      .catch((error) => console.error(error.message));\n  };\n\n  const dischargeBot = (botId) => {\n    fetch(`http://localhost:3001/bots/${botId}`, {\n      method: 'DELETE',\n    })\n      .then(() => {\n        setBots((bots) => bots.filter((bot) => bot.id !== botId));\n        setYourBotArmy((bots) => bots.filter((bot) => bot.id !== botId));\n      })\n      .catch((error) => console.error('Error discharging bot:', error));\n  };\n\n  \n\n  const selectBot = (bot) => {\n    setSelectedBot(bot);\n  };\n\n  const goBackToListView = () => {\n    setSelectedBot(null);\n  };\n\n  const handleSortChange = (value) => {\n    setSortBy(value);\n  };\n\n  return (\n    <div>\n      <h1 id='title'>Bot Battlr</h1>\n      <SortBar onSortChange={handleSortChange} />\n      {selectedBot ? (\n        <BotSpecs\n          bot={selectedBot}\n          goBackToListView={goBackToListView}\n          addBotToArmy={addBotToArmy}\n        />\n      ) : (\n        <>\n          <YourBotArmy army={yourBotArmy} removeBotFromArmy={removeBotFromArmy} />\n          <BotCollection\n            bots={bots}\n            selectBot={selectBot}\n            addBotToArmy={addBotToArmy}\n            dischargeBot={dischargeBot}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}